/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { OnchainRiddle, OnchainRiddleInterface } from "../OnchainRiddle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "correct",
        type: "bool",
      },
    ],
    name: "AnswerAttempt",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "riddle",
        type: "string",
      },
    ],
    name: "RiddleSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "Winner",
    type: "event",
  },
  {
    inputs: [],
    name: "bot",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "riddle",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_riddle",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "_answerHash",
        type: "bytes32",
      },
    ],
    name: "setRiddle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_answer",
        type: "string",
      },
    ],
    name: "submitAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556106fb806100326000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806310814c37146100675780631fdf55851461008557806322f3e2d41461009a57806356049a86146100af578063bb3e3159146100c4578063dfbf53ae146100d7575b600080fd5b61006f6100df565b60405161007c9190610533565b60405180910390f35b6100986100933660046104d4565b6100ee565b005b6100a26101bf565b60405161007c9190610547565b6100b76101cf565b60405161007c9190610552565b6100986100d2366004610499565b61025d565b61006f610370565b6000546001600160a01b031681565b6000546001600160a01b031633146101215760405162461bcd60e51b815260040161011890610585565b60405180910390fd5b600354600160a01b900460ff161561014b5760405162461bcd60e51b8152600401610118906105bc565b815161015e90600190602085019061037f565b506002819055600380546001600160a01b031960ff60a01b19909116600160a01b171690556040517fc7c868b4cedbfd1ed1d9ab41c080a195ed463c01132c6c4b4b8d7983d1c5c29c906101b3908490610552565b60405180910390a15050565b600354600160a01b900460ff1681565b600180546101dc90610674565b80601f016020809104026020016040519081016040528092919081815260200182805461020890610674565b80156102555780601f1061022a57610100808354040283529160200191610255565b820191906000526020600020905b81548152906001019060200180831161023857829003601f168201915b505050505081565b600354600160a01b900460ff166102865760405162461bcd60e51b81526004016101189061061a565b6003546001600160a01b0316156102af5760405162461bcd60e51b8152600401610118906105eb565b600254816040516020016102c39190610517565b6040516020818303038152906040528051906020012014156103265760038054336001600160a01b0319909116811760ff60a01b19169091556040517f745c90b656b4aafe296c8ca35aeacfe56cb96c90e1d320e5da643fff1051b6c090600090a25b60035460405133917fe1fc7c66a657ead4c3d3717cd8f74fb75e793a583bdc4105621e53abf02a9b0591610365916001600160a01b0316841490610547565b60405180910390a250565b6003546001600160a01b031681565b82805461038b90610674565b90600052602060002090601f0160209004810192826103ad57600085556103f3565b82601f106103c657805160ff19168380011785556103f3565b828001600101855582156103f3579182015b828111156103f35782518255916020019190600101906103d8565b506103ff929150610403565b5090565b5b808211156103ff5760008155600101610404565b600082601f830112610428578081fd5b813567ffffffffffffffff80821115610443576104436106af565b604051601f8301601f191681016020018281118282101715610467576104676106af565b60405282815284830160200186101561047e578384fd5b82602086016020830137918201602001929092529392505050565b6000602082840312156104aa578081fd5b813567ffffffffffffffff8111156104c0578182fd5b6104cc84828501610418565b949350505050565b600080604083850312156104e6578081fd5b823567ffffffffffffffff8111156104fc578182fd5b61050885828601610418565b95602094909401359450505050565b60008251610529818460208701610644565b9190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602082528251806020840152610571816040850160208701610644565b601f01601f19169190910160400192915050565b6020808252601f908201527f4f6e6c7920626f742063616e2063616c6c20746869732066756e6374696f6e00604082015260600190565b602080825260159082015274526964646c6520616c72656164792061637469766560581b604082015260600190565b602080825260159082015274149a59191b1948185b1c9958591e481cdbdb1d9959605a1b604082015260600190565b60208082526010908201526f4e6f2061637469766520726964646c6560801b604082015260600190565b60005b8381101561065f578181015183820152602001610647565b8381111561066e576000848401525b50505050565b60028104600182168061068857607f821691505b602082108114156106a957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220994799ab4f4cfd0adbb7756d44431aea3321616abf14dc8a2c4f54781a6a3dc564736f6c63430008000033";

type OnchainRiddleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OnchainRiddleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OnchainRiddle__factory extends ContractFactory {
  constructor(...args: OnchainRiddleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OnchainRiddle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OnchainRiddle__factory {
    return super.connect(runner) as OnchainRiddle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OnchainRiddleInterface {
    return new Interface(_abi) as OnchainRiddleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OnchainRiddle {
    return new Contract(address, _abi, runner) as unknown as OnchainRiddle;
  }
}
